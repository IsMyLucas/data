{
"notes":[
      {
        "id": "1",
        "name": "数据结构",
        "msg": "computer science",
        "firstImg": "http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg",
        "title": "时间复杂度",
        "time":"2017.12.28",
        "text":"将算法中基本操作的执行次数作为算法的时间复杂度。时间复杂度不是执行完一段程序的总时间，而是其中基本操作的总次数。

计算一个算法时间复杂度的步骤如下：
1.确定算法中的基本操作，以及问题的规模。
2.根据基本操作执行情况计算出规模n的函数f(n)，并确定时间复杂度为T(n)=O(f(n)中增长最快的项/此项的系数)。

常用的各种时间复杂度大小的比较关系如下：

O(1)≤O(log2n)≤O(n)≤O(nlog2n)≤O(n2)≤O(n3)≤……≤O(nk)≤O(2n)",

        "mark": "公开文档",
        "url": "https://segmentfault.com/a/1190000002465832"
      },
            {
        "id": "2",
        "name": "数据结构",
        "msg": "computer science",
        "firstImg": "http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg",
        "title": "时间复杂度",
        "time":"2017.12.28",
        "text":"将算法中基本操作的执行次数作为算法的时间复杂度。时间复杂度不是执行完一段程序的总时间，而是其中基本操作的总次数。

计算一个算法时间复杂度的步骤如下：
1.确定算法中的基本操作，以及问题的规模。
2.根据基本操作执行情况计算出规模n的函数f(n)，并确定时间复杂度为T(n)=O(f(n)中增长最快的项/此项的系数)。

常用的各种时间复杂度大小的比较关系如下：

O(1)≤O(log2n)≤O(n)≤O(nlog2n)≤O(n2)≤O(n3)≤……≤O(nk)≤O(2n)",

        "mark": "公开文档",
        "url": "https://segmentfault.com/a/1190000002465832"
      },
   
    ]
}
